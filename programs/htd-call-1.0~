#!/usr/bin/env bash
#TODO: move to python script

basename=$(basename $0)
base_path=$(realpath $(dirname $(realpath $0))/..)
tmp_path=$TMPDIR
if [ -z $tmp_path ] ; then
    tmp_path=/tmp
fi

source "$base_path/bin/trap.sh"

usage() { echo "Usage: $0 -f <instance> [-s <!usc|bb>] [-e <encoding>]" 1>&2; exit 1; }

while getopts "f:e:s:t:h" opt; do
  case $opt in
    f)
      instance=${OPTARG}
      if [ ! -e $instance ] ; then
	  echo "Instance \"$instance\" does not exists. Exiting..."
	  exit 1
      fi
      ;;
    e)
      encoding=${OPTARG}
      ;;
    s)
      strategy=${OPTARG}
      ;;
    t)
      time_limit=${OPTARG}
      ;;
    h)
      usage
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

# if [[ $# -ne 0 ]] ; then
#     echo 'Invalid or missing arguments...'
#     echo 'Exiting...'
#     usage
#     exit 1
# fi

if [ -z "$strategy" ] ; then
    strategy='usc'
fi

if [ -z $encoding ] ; then
    >&2 printf 'No encoding given. '
    encoding=$base_path'/ASP-encodings/acyc2.lp'
    >&2 echo "Using $encoding."
fi

if [ ! -e $encoding ] ; then
    echo "Encoding \"$encoding\" does not exists. Exiting..."
    exit 1
fi

if [ -z $instance ] ; then
    echo "No instance given. Exiting..."
    usage
fi

if [ "$time_limit" -eq "$time_limit" ] 2>/dev/null; then
    :
else
    time_limit=0
fi

bin=$(realpath $0)
path=$(realpath $(dirname $bin)/..)
instance=$(realpath $instance)
encoding=$(realpath $encoding)
grounder_version=$(gringo --version | head -n 1)
solver=clasp #~/bin/clasp-3.2.2
#solver=clasp-acyc-banane
#$(realpath ~/bin/clasp-3.2.2)

solver_version=$($solver --version | head -n1)

ihash=$(sha256sum $instance | awk '{print $1'})
ehash=$(sha256sum $encoding | awk '{print $1'})
claspopts="--opt-strategy=$strategy" #  --enable-acyc"

outerr() { >&2 echo $@; }
output() { outerr "  "\"$1\" : \"$2\",; }
outputn() { outerr "  "\"$1\" : \"$2\"; }

#dimacs2lp
tmplp=$(mktemp $tmp_path/tmp.dimacs2lp.XXXXXX)
cat $instance | $path/converters/dimacs2lp.py > $tmplp 

tmptw=$(mktemp $tmp_path/tmp.dimacs2lp.XXXXXX)
#determine upper bound for treewidth heuristically
outerr  "Compute upper bound "
for i in {1..40} ; do htd_main --seed $RANDOM --input lp --strategy challenge --opt width --output width < $tmplp >> $tmptw; done; 

ubound=$(cat $tmptw | sort | head -n1)
rm $tmptw


#TODO: change if grounding time exceeds
tmpgnd=$(mktemp $tmp_path/tmp.$basename.gnd.XXXXXX)

gnd_call="cat $tmplp | gringo -c ubound=$ubound $encoding -  > $tmpgnd"
eval $gnd_call

tmpoutput=$(mktemp $tmp_path/tmp.$basename.out.XXXXXX)
tmperr=$(mktemp $tmp_path/tmp.$basename.out.XXXXXX)

#--merge-constraint-condition=1 -k -ck -wk -osle -oqh

#call="$path/bin/lp2normal-2.27 --merge-constraint-condition=1 -k -ck -wk -osle -oqh $tmpgnd | $path/bin/igen-1.7 | $solver $claspopts --config=trendy --outf=2 --stat=2 --quiet - --time-limit=$time_limit 2>$tmperr > $tmpoutput &"
#call="$solver $claspopts --config=trendy --outf=2 --stat=2 --quiet $tmpgnd --time-limit=$time_limit 2>$tmperr > $tmpoutput &"
call="$solver $claspopts --outf=2 --stat=2 --quiet $tmpgnd --time-limit=$time_limit 2>$tmperr > $tmpoutput &"

outerr {
output solver $solver_version
output grounder $grounder_version
output ubound $ubound 
output instance $instance
output encoding $encoding
output gnd_call "$gnd_call"
output call "$call"
output ihash $ihash
output ehash $ehash
outputn claspopts $claspopts
outerr }

if [ -s $tmpgnd ] ; then
    eval $call
    #proc=$(pgrep -P $$ -n)
    #wait $proc
    wait
fi

cat $tmperr >&2
cat $tmpoutput >&2


cat $tmpoutput | $base_path/bin/claspo2csv.py --solver="$solver_version" --grounder="$grounder_version" --instance="$instance" --encoding="$encoding" --call="$call" --ihash="$ihash" --ehash="$ehash" --claspopts=$claspopts --ubound=$ubound; echo

rm $tmpoutput
rm $tmpgnd
rm $tmperr
rm $tmplp
