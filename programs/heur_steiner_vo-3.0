#!/bin/bash
#bash instance encoding translator_params clasp_params converter_params dflatconverter_params
#echo "bash instance encoding dflat/dynasp_params clasp_params converter_params dflatconverter_params output EDGE"
pid=$$
#clean ordering
#echo "" > g.inp.translator.$pid
echo $*
t=$5
echo $t
echo "USING: $pid"
cat $9 > $t/inst.$pid
echo "DFLATing..."
#Using MCS!
#--elimination min-degree: use variable orderings instead of TDs (still MCS)
/mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/dflat3 --heurpred vertex --heurmode 2 -s dummy -e edge --graphml-out $t/g.inp.$pid -f $t/inst.$pid --print-decomposition --seed $2                        --no-empty-root --no-empty-leaves -n semi #--elimination min-degree #--path-decomposition
#/mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/dflat2 -s dummy -e edge --graphml-out g.xml.$pid -f inst.$pid --print-decomposition --seed $2                        --no-empty-root --no-empty-leaves -n semi #--elimination min-degree #--path-decomposition
echo "DFLAT done"
echo "DFLAT2ASPing..."
python /mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/heuristics/Dflat2ASP.py "vertex,selectedEdge" < $t/g.inp.$pid > $t/g.out.$pid
if [ $(wc -c < $t/g.out.$pid) -le 4 ]	#variable ordering mode
then
	cp $t/g.inp.$pid $t/g.out.$pid
fi
echo "DFLAT2ASP done..."
echo "CLASPing..."
cat $t/inst.$pid $1 $t/g.out.$pid | /mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/gringo  > $t/g.gr.out.$pid.gr
/mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/heuristics/callpot.sh $t/inst.$pid $1 $pid "--configuration=$3" > $t/g.g.out.$pid.out 2> $t/g.g.out.$pid
echo "CLASP done"
#cat g.g.out.$pid >&2
cat $t/g.g.out.$pid.out

