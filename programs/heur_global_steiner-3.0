#!/bin/bash
#bash instance encoding translator_params clasp_params converter_params dflatconverter_params
#echo "bash instance encoding dflat/dynasp_params clasp_params converter_params dflatconverter_params"
pid=$$
#clean ordering
#echo "" > g.inp.translator.$pid
echo $*
t=$5
echo $t
echo "USING: $pid"
cat $9 > $t/inst.$pid
echo "GRINGOing..."
cat $1 $t/inst.$pid  /mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/gringo > $t/g.gr.out.$pid.gr
echo "GRINGO done"
echo "DYNASPing..."
#TODO: add parameters via command line argument
#-bb: variable ordering instead of -b: tree decomposition
#cat g.inp.$pid | dynasp2 -d  $3             -bb -s $RANDOM -c 2         -s $pid #-bb
cat $t/g.gr.out.$pid.gr | /mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/dynasp -d -i 1 -q $t             -bb -c 6         -s $2 -s $pid #-bb
echo "DYNASP done"
echo "REVERSE_GRINGOing..."
#sz=$(wc -c < "g.inp.dynasp.$pid")
#if [ $sz -le 4 ]
#then
#	python ReverseGringo.py g.inp.$pid g.inp.translator.$pid $5 > g.out2.$pid
#else
	python  /mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/heuristics/ReverseGringo.py $t/g.gr.out.$pid.gr $t/g.inp.dynasp.$pid "selectedEdge" > $t/g.out2.$pid
#fi
echo "REVERSE_GRINGO done"
echo "DYN2ASPing..."
cat $t/g.out2.$pid | python /mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/heuristics/Dyn2ASP.py "selectedEdge" > $t/g.out.$pid
if [ $(wc -c < $t/g.out.$pid) -le 4 ]      #variable ordering mode
then
	cp $t/g.out2.$pid $t/g.out3.$pid
        cp $t/g.out2.$pid $t/g.out.$pid
fi
echo "DYN2ASP done"
#echo "GRINGOing2..."
#gringo $2 $1 g.reverse.$pid > g.out.$pid
#echo "GRINGO2 done"
echo "CLASPing..."

/mnt/vg01/lv01/home/decodyn/src/benchmark-tool/programs/heuristics/callpot.sh $t/inst.$pid $1 $pid "--configuration=$3" > $t/g.g.out.$pid.out 2> $t/g.g.out.$pid
#\time clasp --quiet --opt-strategy=bb --stats=2 --heuristic=domain --configuration=$3 $4 < gringoout2
echo "CLASP done"

cat $t/g.g.out.$pid.out

